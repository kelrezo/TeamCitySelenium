<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Automation.Common.Utilities</name>
    </assembly>
    <members>
        <member name="T:Automation.Common.Utilities.AggregateExceptionHandler">
            <summary>
            The aggregate exception handler.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.AggregateExceptionHandler.RethrowFirstNonAggregateException(System.AggregateException,System.Boolean)">
            <summary>
            	Re-throw the first inner exception of the specified <see cref="T:System.AggregateException"/> that isn't, itself, an <see cref="T:System.AggregateException"/> (retaining the original stack-trace).
            </summary>
            <param name="aggregateException">
            	The aggregate exception.
            </param>
            <param name="rethrowFirstNonAggregateException">
            	If <c>true</c>, the first, inner, non-<see cref="T:System.AggregateException"/> is always re thrown.
            	If <c>false</c>, the inner exception (if any) will only be passed through it is the sole, inner, non-<see cref="T:System.AggregateException"/>.
            </param>
            <remarks>
            	The inner exceptions the aggregate exception (or any nested <see cref="T:System.AggregateException"/>s) will be coalesced into a single <see cref="T:System.AggregateException"/> using <see cref="M:System.AggregateException.Flatten"/>.
            </remarks>
        </member>
        <member name="T:Automation.Common.Utilities.EnumHelper">
            <summary>
            The enum helper.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.EnumHelper.AsEnum``1(System.Object,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <typeparam name="TEnum">
            The enumeration type to which to convert <paramref name="value"/>.
            </typeparam>
            <param name="value">
            An object that implements the <see cref="T:System.IConvertible"/> interface, or null. 
            </param>
            <param name="flags">
            Indicates if the <see cref="!:TEnum"/> has the Flags attributes
            </param>
            <returns>
            An object of type <see cref="!:TEnum"/> whose value is represented by <paramref name="value"/>.
            </returns>
        </member>
        <member name="T:Automation.Common.Utilities.LinqComparer">
            <summary>
            LINQ extensions with lambda comparers. 
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Contains``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``1})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <returns>
            True if the source sequence contains an element that has the specified value; otherwise, false.
            </returns>
            <param name="source">
            A sequence in which to locate a value.
            </param>
            <param name="value">
            The value to locate in the sequence.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of the key returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Create``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Get an instance of <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <typeparam name="T">
            The object type under comparison.
            </typeparam>
            <param name="compare">
            The compare.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Create``2(System.Func{``0,``1})">
            <summary>
            Create an instance of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="TSource">
            The source type.
            </typeparam>
            <typeparam name="TKey">
            The key type.
            </typeparam>
            <param name="selectKey">
            The compare Key Selector.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Create``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            The create.
            </summary>
            <param name="equals">
            The equals.
            </param>
            <param name="getHashCode">
            The get hash code.
            </param>
            <typeparam name="T">
            The source type.
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.
            </returns>
            <param name="source">
            The sequence to remove duplicate elements from.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of the key returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Except``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <param name="first">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in <paramref name="second"/> will be returned.
            </param>
            <param name="second">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of the key returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="first"/> or <paramref name="second"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Func{``1,``3})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.
            </summary>
            <returns>
            A collection of elements of type <see cref="!:TResult"/> where each element represents a projection over a group and its key.
            </returns>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by <paramref name="resultSelector"/>.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of the key returned by <paramref name="selectKey"/>.
            </typeparam>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.
            </summary>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2"/> object contains a collection of objects of type <see cref="!:TElement"/> and a key.
            </returns>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in the <see cref="T:System.Linq.IGrouping`2"/>.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.GroupBy``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Func{``1,``4})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.
            </summary>
            <returns>
            A collection of elements of type <see cref="!:TResult"/> name="TResult"/&gt; where each element represents a projection over a group and its key.
            </returns>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2"/>.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in each <see cref="T:System.Linq.IGrouping`2"/>.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by <paramref name="resultSelector"/>.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.GroupJoin``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Func{``2,``4})">
            <summary>
            Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> is used to compare keys.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements of type <see cref="!:TResult"/> that are obtained by performing a grouped join on two sequences.
            </returns>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="outer"/> or <paramref name="inner"/> or <paramref name="outerKeySelector"/> or <paramref name="innerKeySelector"/> or <paramref name="resultSelector"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Intersect``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <returns>
            A sequence that contains the elements that form the set intersection of two sequences.
            </returns>
            <param name="first">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in <paramref name="second"/> will be returned.
            </param>
            <param name="second">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence will be returned.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="first"/> or <paramref name="second"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Join``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Func{``2,``4})">
            <summary>
            Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> is used to compare keys.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has elements of type <see cref="!:TResult"/> that are obtained by performing an inner join on two sequences.
            </returns>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="outer"/> or <paramref name="inner"/> or <paramref name="outerKeySelector"/> or <paramref name="innerKeySelector"/> or <paramref name="resultSelector"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified comparer.
            </summary>
            <param name="source">
            A sequence of values.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="compare">
            A function to create a Comparer.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified comparer.
            </summary>
            <param name="source">
            A sequence of values.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="compare">
            A function to create a Comparer.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.SequenceEqual``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <returns>
            True if the two source sequences are of equal length and their corresponding elements compare equal according to <see cref="!:TCompareKey"/>; otherwise, false.
            </returns>
            <param name="first">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to <paramref name="second"/>.
            </param>
            <param name="second">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to the first sequence.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="first"/> or <paramref name="second"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted according to a key.
            </returns>
            <param name="source">
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="compare">
            The compare.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="keySelector"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
            </summary>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted in descending order according to a key.
            </returns>
            <param name="source">
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="compare">
            The compare.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="keySelector"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.ToDictionary``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function, a comparer, and an element selector function.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains values of type <see cref="!:TElement"/> selected from the input sequence.
            </returns>
            <param name="source">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector"/>.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.-or-<paramref name="keySelector"/> produces a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="keySelector"/> produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.ToLookup``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,``3})">
            <summary>
            Creates a <see cref="T:System.Linq.Lookup`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> according to a specified key selector function, a comparer and an element selector function.
            </summary>
            <returns>
            A <see cref="T:System.Linq.Lookup`2"/> that contains values of type <see cref="!:TElement"/> selected from the input sequence.
            </returns>
            <param name="source">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Linq.Lookup`2"/> from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by <paramref name="keySelector"/>.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by <paramref name="elementSelector"/>.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="keySelector"/> or <paramref name="elementSelector"/> is null.
            </exception>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.Union``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
            <param name="first">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.
            </param>
            <param name="second">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.
            </param>
            <param name="selectKey">
            The select Key.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <typeparam name="TCompareKey">
            The type of comparer returned by <paramref name="selectKey"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="first"/> or <paramref name="second"/> is null.
            </exception>
        </member>
        <member name="T:Automation.Common.Utilities.LinqComparer.KeyComparer`1">
            <summary>
            The comparer.
            </summary>
            <typeparam name="T">
            The source object type.
            </typeparam>
        </member>
        <member name="F:Automation.Common.Utilities.LinqComparer.KeyComparer`1.compare">
            <summary>
            The compare.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.KeyComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initialises a new instance of the <see cref="T:Automation.Common.Utilities.LinqComparer.KeyComparer`1"/> class. 
            Initializes a new instance of the <see cref="T:Automation.Common.Utilities.LinqComparer.KeyComparer`1"/> class.
            </summary>
            <param name="compare">
            The compare.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.KeyComparer`1.Compare(`0,`0)">
            <summary>
            The compare.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1">
            <summary>
            The equality comparer.
            </summary>
            <typeparam name="T">
            The object type.
            </typeparam>
        </member>
        <member name="F:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1.equals">
            <summary>
            The equals.
            </summary>
        </member>
        <member name="F:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1.getHashCode">
            <summary>
            The get hash code.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initialises a new instance of the <see cref="T:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1"/> class. 
            Initializes a new instance of the <see cref="T:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1"/> class.
            </summary>
            <param name="equals">
            The equals.
            </param>
            <param name="getHashCode">
            The get hash code.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1.Equals(`0,`0)">
            <summary>
            The equals.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.LinqComparer.KeyEqualityComparer`1.GetHashCode(`0)">
            <summary>
            The get hash code.
            </summary>
            <param name="obj">
            The object.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:Automation.Common.Utilities.DatabaseHelpers">
            <summary>
            The database helpers.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.BackupDatabase(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Backups the Database.
            </summary>
            <param name="sqlConnection">
            The SQL connection of the database to be backup.
            </param>
            <param name="destinationPath">
            The backup file path.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.BackupDatabase(System.String,System.String)">
            <summary>
            Backups the Database.
            </summary>
            <param name="connectionString">
            The connection string of the database to be backup.
            </param>
            <param name="destinationPath">
            The backup file path.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.DropDatabase(System.String)">
            <summary>
            Drop data base.
            </summary>
            <param name="dbConnectionString">
            The database connection string.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.ExecuteSqlFile(System.String,System.String)">
            <summary>
            Executes the SQL file.
            </summary>
            <param name="dbConnectionString">
            The database connection string.
            </param>
            <param name="sqlFile">
            The SQL file.
            </param>
            <returns>
            The number of rows affected.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.ExecuteSqlQueries(System.String,System.String)">
            <summary>
            Executes  the specified query.
            </summary>
            <param name="connectionString">
            The database connection string.
            </param>
            <param name="querystring">
            The sql query string.
            </param>
            <returns>
            A string array will be returned, and each string stores column values
                for each row in the query results and the value of individual column is separated by a semicolon
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.GetConnectionString(System.String)">
            <summary>
            Ensure that the specified value either represents the name of a SQL server connection string.
            </summary>
            <param name="nameOrConnectionString">
            The connection string name or connection string.
            </param>
            <returns>
            The connection string.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.GetTableResults(System.Configuration.ConnectionStringSettings,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Get the Data table that filled with data retrieved from database by executing the SQL query.
            </summary>
            <param name="connectionStringSettings">
            The connection String Settings.
            </param>
            <param name="query">
            The prepared statement.
            </param>
            <param name="sqlParameters">
            The sql Parameters.
            </param>
            <returns>
            The <see cref="T:System.Data.DataTable"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.GetTableResults(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Get the Data table that filled with data retrieved from database by executing the SQL query.
            </summary>
            <param name="connectionString">
            The SQL database connection string.
            </param>
            <param name="query">
            The prepared statement.
            </param>
            <param name="sqlParameters">
            The sql Parameters.
            </param>
            <returns>
            The <see cref="T:System.Data.DataTable"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.RestoreDatabase(System.String,System.String)">
            <summary>
            Restores a Database from backup file.
            </summary>
            <param name="connectionString">
            The connection string provides the information for the database to be restored.
            </param>
            <param name="restoreFrom">
            The backup file path.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.DatabaseHelpers.SaveTableData(System.String,System.String,System.String)">
            <summary>
            Saves the table data.
            </summary>
            <param name="connectionString">
            The connection string.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="file">
            The file.
            </param>
        </member>
        <member name="T:Automation.Common.Utilities.FileHelpers">
            <summary>
                Define method to read or write files.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.Backup(System.String,System.String,System.String)">
            <summary>
            Back up file to the back up folder.
            </summary>
            <param name="path">
            The current file path.
            </param>
            <param name="file">
            The file to be backed up.
            </param>
            <param name="backupFolder">
            The backup folder, where you backup your file.
            </param>
            <returns>
            Returns true if back up completes successfully.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.CopyAll(System.String)">
            <summary>
            Copy items from source directory to destination directory.
            </summary>
            <param name="source">
            The source directory.
            </param>
            <returns>
            The destination directory name <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.CopyAll(System.String,System.String)">
            <summary>
            Copy items from source directory to destination directory.
            </summary>
            <param name="source">
            The source directory.
            </param>
            <param name="destination">
            The destination directory.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.CopyAll(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Copy items from source directory to destination directory.
            </summary>
            <param name="source">
            The source directory.
            </param>
            <param name="destination">
            The destination directory.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.GetDataFromFile(System.String,System.String,System.Boolean)">
            <summary>
            Get data from file and store in a data table object.
            </summary>
            <param name="fileFullName">
            The source file full name.
            </param>
            <param name="separator">
            The separator used to get columns delimited.
            </param>
            <param name="quoted">
            True if the separated strings are double-quoted. Default is true.
            </param>
            <returns>
            The System.Data.DataTable.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.RestoreFile(System.String,System.String,System.String)">
            <summary>
            Restore file from the back up folder to the current path.
            </summary>
            <param name="path">
            The current path.
            </param>
            <param name="file">
            The file needs to be restored.
            </param>
            <param name="backupFolder">
            The backup folder from where to restore.
            </param>
            <returns>
            Returns true if restore completes successfully.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.SaveDataTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Save data table to a file.
            </summary>
            <param name="data">
            The data.
            </param>
            <param name="fileName">
            The file name.
            </param>
            <param name="separator">
            The separator.
            </param>
            <param name="quoted">
            The quoted.
            </param>
        </member>
        <member name="M:Automation.Common.Utilities.FileHelpers.DelimitedRow(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Get the delimited row with separator and quote mark if required.
            </summary>
            <param name="row">
            The data row.
            </param>
            <param name="separator">
            The separator.
            </param>
            <param name="quoted">
            The quoted.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Automation.Common.Utilities.HashCodeCombiner">
            <summary>
                Combines hash codes.
            </summary>
        </member>
        <member name="F:Automation.Common.Utilities.HashCodeCombiner.HashCodeMultiplier">
            <summary>
                Another magic number for multiplication before adding each field.
            </summary>
            <remarks>
                See the remarks for <see cref="F:Automation.Common.Utilities.HashCodeCombiner.HashCodeStarter"/>.
            </remarks>
        </member>
        <member name="F:Automation.Common.Utilities.HashCodeCombiner.HashCodeStarter">
            <summary>
                Magic number for starting hash code.
            </summary>
            <remarks>
                Don't ask me why this works; it just does.
            </remarks>
        </member>
        <member name="M:Automation.Common.Utilities.HashCodeCombiner.CombineHashCodes(System.Object[])">
            <summary>
            Combine the hash codes of the specified objects.
            </summary>
            <param name="values">
            The objects to combine.
            </param>
            <returns>
            The combined hash code (generated using addition combined with prime multiplication).
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.HashCodeCombiner.CombineHashCodes(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Combine the hash codes of the specified objects.
            </summary>
            <param name="objects">
            The objects to combine.
            </param>
            <returns>
            The combined hash code (generated using addition combined with prime multiplication).
            </returns>
        </member>
        <member name="T:Automation.Common.Utilities.ObjectHelper">
            <summary>
                The object helper.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.ObjectHelper.CopyFieldsToTarget``1(``0,``0)">
            <summary>
                To copy public instance fields to a target object of the same type.
            </summary>
            <param name="source">
                The source.
            </param>
            <param name="target">
                The target.
            </param>
            <typeparam name="T">
                The object type.
            </typeparam>
        </member>
        <member name="T:Automation.Common.Utilities.RegistryHelpers">
            <summary>
            The registry helpers.
            </summary>
        </member>
        <member name="T:Automation.Common.Utilities.StringHelper">
            <summary>
                The string helper.
            </summary>
        </member>
        <member name="M:Automation.Common.Utilities.StringHelper.Random(System.String,System.Int32,System.Boolean)">
            <summary>
            To randomize the provided string by appending a random <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">
            The original value.
            </param>
            <param name="length">
            The length of the random string to be attached.
            </param>
            <param name="appending">
            The flag that indicating whether to append or prefix the random string.
            </param>
            <returns>
            The randomized <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.StringHelper.EscapeForDataFilter(System.String)">
            <summary>
            Escapes for data filter.
            </summary>
            <param name="data">
            The data.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.StringHelper.FormatAsKeyValuePair(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Format a the key and value pair.
            </summary>
            <param name="key">
            The key.  
            </param>
            <param name="value">
            The value. 
            </param>
            <param name="dilimited">
            If true, append the separator string to the end. 
            </param>
            <param name="separator">
            The separator. 
            </param>
            <returns>
            The formatted string with the form of [Key:Value]. 
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.StringHelper.QuoteAndDelimite(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Format the existing string to be encapsulated by double quote mark.
            </summary>
            <param name="input">
            The input string. 
            </param>
            <param name="quoted">
            To specify whether to double quote the original string. 
            </param>
            <param name="dilimited">
            If true, append the separator string to the end. 
            </param>
            <param name="separator">
            The separator. 
            </param>
            <returns>
            The System.String. 
            </returns>
        </member>
        <member name="M:Automation.Common.Utilities.StringHelper.RandomHexDigital(System.UInt32)">
            <summary>
            Generate one random hex string.
            </summary>
            <param name="length">The random string length.</param>
            <returns>The random hex string.</returns>
        </member>
        <member name="M:Automation.Common.Utilities.StringHelper.RandomDecDigital(System.UInt32)">
            <summary>
            Generate one random decimal string.
            </summary>
            <param name="length">The random string length.</param>
            <returns>The random decimal string.</returns>
        </member>
        <member name="M:Automation.Common.Utilities.StringHelper.RandomMacAddress">
            <summary>
            Generate one random mac address string.
            </summary>
            <returns>The random mac address string.</returns>
        </member>
    </members>
</doc>
